<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>OSTEP notes:CH.20 分页:较小的表</title>
    <link href="/2024/05/27/OSTEP-notes-CH-20-%E5%88%86%E9%A1%B5-%E8%BE%83%E5%B0%8F%E7%9A%84%E8%A1%A8/"/>
    <url>/2024/05/27/OSTEP-notes-CH-20-%E5%88%86%E9%A1%B5-%E8%BE%83%E5%B0%8F%E7%9A%84%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="Motivation"><a href="#Motivation" class="headerlink" title="Motivation"></a>Motivation</h1><p><strong>页表消耗的内存太多！</strong>现代系统中会有上百个进程，如果我们要为每个进程都分配一个页表，那么页表会占用大量的内存！<br><strong>我们需要一种合理的方法来缩小页表。</strong></p><hr><h1 id="Solution-1：更大的页"><a href="#Solution-1：更大的页" class="headerlink" title="Solution 1：更大的页"></a>Solution 1：更大的页</h1><p>最简单的方法就是使用更大的页！<br>在地址空间大小一定的情况下，<strong>使用更大的页</strong>，会<strong>导致更短的VPN</strong>，即<strong>更少的页数量</strong>，<strong>更少的页数量意味着页表中会有更少的PTE</strong>，自然也就缩小了页表的大小。<br>更大的页还有其他好处：它<strong>减轻了TLB的压力</strong>！试想对于一个更大的页，我们在随机访问元素时会更容易命中，而不会遭受太多的TLB未命中之苦。<br>但是<strong>更大的页意味着内部碎片问题的加重</strong>！所以在大多数系统都会使用较小的页，例如在 x86 中使用 4KB大小的页。</p><hr><h1 id="Solution-2：混合分页和分段"><a href="#Solution-2：混合分页和分段" class="headerlink" title="Solution 2：混合分页和分段"></a>Solution 2：混合分页和分段</h1><p>回想一下，抛去页表大小这个问题！为什么线性页表机制会导致较大的页表？主要是因为<strong>在堆和栈之间有大量的地址空间没有被使用，却还在页表中占用着页表项。</strong><br><img src="/"><br>而分段方法恰好可以解决这个问题！于是我们将分页和分段的方法杂合起来。<br>我们的杂合方法<strong>不是为进程的整个地址空间提供单个页表，而是为每个逻辑分段提供一个。</strong>可以理解为在分段的基础上进行分页！<br>回忆一下，如果要使用分段机制，那我们需要两个寄存器：</p><ul><li>基址寄存器（base）：告诉我们<u>每个段在物理内存中的位置</u></li><li>界限寄存器（bound）：告诉我们<u>该段的大小</u></li></ul><p>但在杂合方法中，我们需要修改这两个寄存器的意义。基址寄存器不是指向段本身，而是<strong>保存该段的页表的物理地址</strong>；界限寄存器则用于<strong>指示页表的结尾（即它有多少有效页，或者说有多少PTE）</strong>。<br>由于分段的引入，虚拟地址VA的划分会做出改变，我们使用高 2 位（假设我们使用的段数量小于等于 4 ）来作为段号 Seg。因此，一个 32 位的虚拟地址如下所示：<br><img src="/"><br>在 TLB 未命中时（假设硬件管理的 TLB，即硬件负责处理 TLB 未命中），硬件<strong>使用分段位（SN)来确定要用哪个基址和界限对</strong>。然后硬件将其中的物理地址与 VPN 结合起来， 形成页表项（PTE) 的地址：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 掩码操作获取段号和VPN</span><br>SN = (VirtualAddress &amp; SEG_MASK) &gt;&gt; SN_SHIFT <br>VPN = (VirtualAddress &amp; VPN_MASK) &gt;&gt; VPN_SHIFT <br><span class="hljs-comment">// 获取PTE的物理地址</span><br>AddressOfPTE = Base[SN] + (VPN * <span class="hljs-keyword">sizeof</span>(PTE)) <br></code></pre></td></tr></table></figure><p>杂合方案的关键区别在于，每个分段都有界限寄存器，每个界限寄存器保存了段中最大有效页的值。例如，如果代码段使用它的前 3 个页（0、1 和 2），则代码段页表将只有 3 个项分配给它，并且界限寄存器将被设置为 3。<strong>内存访问超出段的末尾将产生一个异常，并可能导致进程终止。</strong>以这种方式，与线性页表相比，杂合方法实现了显著的内存节省。<strong>栈和堆之间未分配的页不再占用页表中的空间（仅将其标记为无效）。</strong><br>分页与分段的杂合方法似乎很好地解决了较大页表的问题，因为它确实不存储那些无效项。但这种杂合方法并不像我们想象中真正完美地解决了问题，并且导致了一系列的问题，<strong>这些问题的由来多半也是因为分段自身的缺陷</strong>：</p><ul><li>分段的方法并不灵活：如果有一个大而稀疏的堆，仍然可能导致大量的页表浪费</li><li><strong>外部碎片再次出现</strong>：在以往的线性页表中，页表也是以页的大小进行存储的，但是分段破坏了这一点！此时的页表大小是整数个PTE！因此，在内存中为它们寻找自由空间更为复杂</li></ul><p>出于这些原因，人 们继续寻找更好的方式来实现更小的页表。</p><hr><h1 id="Solution-3：多级页表"><a href="#Solution-3：多级页表" class="headerlink" title="Solution 3：多级页表"></a>Solution 3：多级页表</h1><p>现在我们又回到原点了，分段分页杂合的方法并不令人满意，问题又出现在面前：<strong>如何去掉页表中的所有无效区域，而不是将它们全部保留在内存中？</strong><br>由此，<strong>多级页表</strong>的方法出现了！<strong>多级页表并不神奇，它只是换了一种组织页表的方式：从原来的线性组织变为树结构的组织方式！</strong>我们来看看是如何实现的。<br>多级页表的基本思想很简单。首先，<strong>将页表分成页大小的单元</strong>。然后，<strong>如果整页的页表项（PTE）无效，就完全不分配该页的页表</strong>。为了追踪页表的页是否有效（以及如果有效， 它在内存中的位置），使用了名为<strong>页目录（page directory）</strong>的新结构。<strong>页目录因此可以告诉 你页表的页在哪里，或者页表的整个页不包含有效页。</strong><br>多级页表的工作方式也很简单：</p><ul><li>让线性页表的一部分消失</li><li>使用页目录表来记录页表的状态（由于部分的线性页表消失了，无法采用类似数组的线性追踪）</li></ul><p>在一个简单的两级页表中，页目录为每页页表包含了一项。它由多个页目录项（Page  Directory Entries，PDE）组成。<strong>PDE（至少）拥有有效位（valid bit）和页帧号（page frame number， PFN），类似于 PTE。</strong>但不同的是，PDE中的有效位为 0 代表该PDE指向的页中<strong>全部无效！</strong>反之同理。<br><img src="/"><br>与之前的方法相比，多级页表有很多优势：</p><ul><li>多级页表分配的页表空间，与你正在使用的地址空间内存量成比例。因此它<u>通常很紧凑，并且支持稀疏的地址空间</u></li><li>页表的每个部分都可以整齐地放入一页中，从而更容易管理内存<br>  这意味着，<strong>我们不需要像线性页表一样，将整个巨大的线性页表连续的驻留在物理内存中，反之可以灵活整齐地将页表放在物理内存的任何位置</strong></li></ul><p>但是根据<strong>时空折中原则</strong>（No free lunch!）多级页表也有自身的缺点：</p><ul><li><strong>TLB未命中导致的巨大时间成本</strong>：需要多次的访问内存！<br>  以二级页表为例：如果TLB未命中，就<strong>首先要找到页目录表中的PDE物理地址</strong>（1 次访存）；再根据PDE中的信息访问对应“低级页表”，再次<strong>访问对应PTE中的信息</strong>（1 次访存）。综上需要 2 次访存，访问内存相对而言的时间成本巨大。</li><li>增加了软硬件设计的复杂性（Anyway！这对于我们来说可能并不算太大的缺点！）</li></ul>]]></content>
    
    
    <categories>
      
      <category>CS Basic Learning</category>
      
      <category>OS</category>
      
      <category>notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>分页机制</tag>
      
      <tag>内存管理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/05/12/hello-world/"/>
    <url>/2024/05/12/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
